# ===================================================================
#                      APPLICATION CONFIGURATION
# ===================================================================
# Defines the name of the application and the port it runs on.
spring.application.name=EmployeeService
server.port=8081


# ===================================================================
#                      DATABASE CONFIGURATION
# ===================================================================
# Configures the connection to the PostgreSQL database.
# The hostname 'db' matches the service name in your docker-compose.yml file.
spring.datasource.url=jdbc:postgresql://localhost:5332/admin
spring.datasource.username=admin
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver


# ===================================================================
#                 JPA, HIBERNATE & LIQUIBASE CONFIGURATION
# ===================================================================
# Sets JPA to validate the schema against the database (recommended with Liquibase).
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Points Liquibase to the master changelog file to manage database migrations.
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml


# ===================================================================
#                      KEYCLOAK CONFIGURATION
# ===================================================================
# Configures the application as a resource server.
# It uses the 'issuer-uri' to fetch the public keys needed to validate incoming JWTs.
# The hostname 'keycloak' matches the service name in your docker-compose.yml file.
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:9080/realms/employee-realm


# ===================================================================
#                  OPEN POLICY AGENT (OPA) CONFIGURATION
# ===================================================================
# Defines the full URL to the OPA decision endpoint.
# Your OpaClient.java will use this property to ask for authorization decisions.
# The hostname 'opa' matches the service name in your docker-compose.yml file.
# The path '/v1/data/emp_service/authz/allow' corresponds to the package and rule in your .rego file.
#opa.service.url=http://opa:8181/v1/data/emp_service/authz/allow
opa.service.url=http://localhost:8181/v1/data/emp_service/authz/allow

# ===================================================================
#                      SWAGGER CONFIGURATION
# ===================================================================
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.oauth2-redirect-url=http://localhost:8081/swagger-ui/oauth2-redirect.html
springdoc.swagger-ui.oauth.client-id=employee-service-client
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.scopes=openid,profile,email
springdoc.oauth2.authorization-url=http://localhost:9080/realms/employee-realm/protocol/openid-connect/auth
springdoc.oauth2.token-url=http://localhost:9080/realms/employee-realm/protocol/openid-connect/token

# Allow Swagger UI to work without authentication
springdoc.swagger-ui.disable-swagger-default-url=true

